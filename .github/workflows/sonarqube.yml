name: SonarQube Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  WORKSPACE: ${{ github.workspace }}
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  PYTHONUTF8: 1
  NODE_VERSION: '18'
  SONAR_SCANNER_VERSION: "5.0.1.3006"

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      checks: write
      pull-requests: write  # Updated to write for PR comments
      issues: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Added Node.js setup for React tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      # Added Python setup for Python tests
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      # Added step to run tests before SonarQube analysis
      - name: Install Dependencies and Run Tests
        run: |
          # For React/JavaScript tests
          if [ -f package.json ]; then
            npm ci
            npm test -- --coverage
          fi
          
          # For Python tests
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest pytest-cov
            pytest --cov=. --cov-report=xml
          fi

      - name: Install SonarScanner
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip
          SCANNER_DIR="$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION"
          mkdir -p "$HOME/.sonar"
          curl -sSLo /tmp/sonar-scanner.zip \
            "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
          unzip -q /tmp/sonar-scanner.zip -d /tmp/
          mv "/tmp/sonar-scanner-$SONAR_SCANNER_VERSION-linux" "$SCANNER_DIR"
          rm /tmp/sonar-scanner.zip
          echo "$SCANNER_DIR/bin" >> $GITHUB_PATH
          echo "SONAR_SCANNER_HOME=$SCANNER_DIR" >> $GITHUB_ENV

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running SonarQube analysis..."
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.projectName=$SONAR_PROJECT_NAME \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.scm.provider=git \
            -Dsonar.scm.revision=$GITHUB_SHA \
            -Dsonar.sources=. \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**,**/__pycache__/**,**/*.test.js,**/*_test.py,**/test_*.py

      - name: Check SonarQube Quality Gate Status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Fetching SonarQube quality gate results..."
          PROJECT_KEY="${{ github.repository_owner }}_${{ github.event.repository.name }}"
          API_URL="$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$PROJECT_KEY"
          RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$API_URL")
          echo "SonarQube API Response: $RESPONSE"
          QUALITY_STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')
          COVERAGE=$(echo "$RESPONSE" | jq -r '.projectStatus.conditions[] | select(.metricKey=="coverage") | .value')
          echo "Quality Gate Status: $QUALITY_STATUS"
          echo "Coverage: $COVERAGE%"
          
          # Generate coverage details for PR comment
          COVERAGE_DETAILS=$(echo "$RESPONSE" | jq -r '.projectStatus.conditions[] | select(.metricKey=="coverage") | "Current coverage: \(.value)%, Required: \(.errorThreshold)%"')
          echo "COVERAGE_DETAILS=$COVERAGE_DETAILS" >> $GITHUB_ENV
          
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" == "null" ]; then
            echo "COVERAGE=0" >> $GITHUB_ENV
          else
            echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          fi

      - name: Determine Pass/Fail Criteria
        run: |
          COVERAGE=${{ env.COVERAGE }}
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "SONAR_STATUS=success" >> $GITHUB_ENV
            echo "STATUS_EMOJI=‚úÖ" >> $GITHUB_ENV
          else
            echo "SONAR_STATUS=failure" >> $GITHUB_ENV
            echo "STATUS_EMOJI=‚ùå" >> $GITHUB_ENV
          fi

      # Add detailed PR comment with coverage info
      - name: Add PR Comment
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          COMMENT="## SonarQube Analysis Results ${{ env.STATUS_EMOJI }}
          
          ${{ env.COVERAGE_DETAILS }}
          
          - Files with low coverage:
          $(sonar-scanner -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.projectName=$SONAR_PROJECT_NAME -Dsonar.scm.disabled=true -Dsonar.scanner.dumpToFile=sonarqube-report.txt -Dsonar.analysis.mode=preview || true && cat sonarqube-report.txt | grep -A 10 "coverage.*0%" || echo "  None found")
          
          [View full report in SonarQube](${{ secrets.SONAR_HOST_URL }}/dashboard?id=$SONAR_PROJECT_KEY)"
          
          gh pr comment $PR_NUMBER --body "$COMMENT"

      - name: Create GitHub Issue if Coverage Below 80%
        if: env.SONAR_STATUS == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TITLE="üö® SonarQube Coverage Below 80%: ${{ github.sha }}"
          LABEL="bug,technical-debt"
          BODY="SonarQube analysis failed due to insufficient code coverage. ‚ùå  
          üîó **Branch**: ${{ github.ref }}  
          üìÇ **Repository**: ${{ github.repository }}  
          üõ† **Triggered By**: ${{ github.actor }}  
          üìä **Code Coverage**: ${{ env.COVERAGE }}% (must be **‚â•80%**)  
          
          ### Recommended actions:
          1. Add tests for untested functions
          2. Focus on testing key business logic
          3. Use code coverage tools locally before pushing
          
          Check the [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
          gh issue create --title "$TITLE" \
                          --body "$BODY" \
                          --label "$LABEL" \
                          --repo ${{ github.repository }}
