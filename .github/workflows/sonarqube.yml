name: CI/CD with SonarQube and Django

on:
  push:
    branches:
      - main

permissions:
  issues: write

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 📂 Locate Django Project
        id: find_project
        run: |
          PROJECT_DIR=$(find . -name manage.py -printf '%h\n' | head -n 1)
          [ -z "$PROJECT_DIR" ] && echo "❌ ERROR: manage.py not found!" && exit 1
          echo "PROJECT_DIR=${PROJECT_DIR}" >> $GITHUB_ENV

      - name: 📞 Install Dependencies
        run: |
          cd "$PROJECT_DIR"
          pip install --upgrade pip
          pip install pytest coverage django jq bc
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

      - name: 📊 Run Tests and Generate Coverage
        run: |
          cd "$PROJECT_DIR"
          python -m coverage run --source=. manage.py test || true
          python -m coverage xml -o coverage.xml

      - name: 🛠️ Install SonarScanner
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: 🔎 Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://7bca-27-107-135-240.ngrok-free.app"
        run: |
          cd "$PROJECT_DIR"
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=my-django-project \
            -Dsonar.sources=. \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.token="$SONAR_TOKEN" \
            -Dsonar.python.version=3.9 \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.working.directory="$PROJECT_DIR/.scannerwork"

      - name: 📊 Check SonarQube Quality Gate
        id: sonar_status
        run: |
          sleep 10
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=my-django-project" | jq -r '.projectStatus.status')
          SCORE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_HOST_URL/api/measures/component?component=my-django-project&metricKeys=coverage" | jq -r '.component.measures[0].value')

          echo "SonarQube Status: $STATUS"
          echo "SonarQube Score: $SCORE"

          echo "SONAR_SCORE=$SCORE" >> $GITHUB_ENV
          echo "SONAR_STATUS=$STATUS" >> $GITHUB_ENV

  notify:
    runs-on: ubuntu-latest
    needs: build-and-analyze

    steps:
      - name: 📢 Notify via GitHub Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SONAR_SCORE=$(echo "${{ env.SONAR_SCORE }}" | tr -d '\r')
          if [ ! -z "$SONAR_SCORE" ] && [ $(echo "$SONAR_SCORE >= 80" | bc) -eq 1 ]; then
            gh issue create --title "✅ Quality Gate Passed" --body "🎉 Your code passed SonarQube analysis with a score of $SONAR_SCORE%. ✅" --repo $GITHUB_REPOSITORY
          else
            gh issue create --title "❌ Quality Gate Failed" --body "😞 Your code failed SonarQube analysis. Fix the issues and retry." --repo $GITHUB_REPOSITORY
