name: SonarQube Analysis

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up SonarQube Scanner
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_SCANNER_HOME: ${{ github.workspace }}/.sonar/scanner
          
      - name: SonarQube Analysis
        id: sonarqube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Running SonarQube analysis..."
          export SONAR_SCANNER_OPTS="-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv6Addresses=false -Dsonar.forceAuthentication=true -Dsonar.network.timeout=300000 -Dsonar.download.timeout=300000"
          $SONAR_SCANNER_HOME/bin/sonar-scanner -X
          SONAR_EXIT_CODE=$?
          echo "sonar_exit_code=$SONAR_EXIT_CODE" >> $GITHUB_OUTPUT
          COVERAGE_PERCENT=0
          if [ "$PYTHON_PROJECT" == "true" ] && [ -f "coverage.xml" ]; then
            COVERAGE_LINE=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 || echo 'line-rate="0"')
            COVERAGE_VALUE=$(echo $COVERAGE_LINE | grep -o '[0-9.]*' || echo "0")
            COVERAGE_PERCENT=$(echo "$COVERAGE_VALUE * 100" | bc -l || echo "0")
            COVERAGE_PERCENT=$(printf "%.2f" $COVERAGE_PERCENT)
          elif [ -f "coverage/lcov.info" ]; then
            TOTAL_LINES=$(grep -c "LF:" coverage/lcov.info || echo 0)
            COVERED_LINES=$(grep -c "LH:" coverage/lcov.info || echo 0)
            if [ $TOTAL_LINES -gt 0 ]; then
              COVERAGE_PERCENT=$(echo "scale=2; ($COVERED_LINES/$TOTAL_LINES) * 100" | bc -l || echo "0")
              COVERAGE_PERCENT=$(printf "%.2f" $COVERAGE_PERCENT)
            fi
          fi
          echo "Calculated coverage percentage: $COVERAGE_PERCENT%"
          echo "coverage_percent=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
          # Store as integer for safer comparison (multiply by 100 to remove decimal point)
          COVERAGE_INT=$(echo "$COVERAGE_PERCENT * 100" | bc | cut -d. -f1)
          THRESHOLD_INT=$(echo "${{ env.MIN_COVERAGE_THRESHOLD }} * 100" | bc | cut -d. -f1)
          echo "coverage_int=$COVERAGE_INT" >> $GITHUB_OUTPUT
          echo "threshold_int=$THRESHOLD_INT" >> $GITHUB_OUTPUT
          echo "Minimum coverage threshold: ${{ env.MIN_COVERAGE_THRESHOLD }}%"

      - name: Show Code Coverage Popup
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = parseFloat('${{ steps.sonarqube.outputs.coverage_percent }}' || '0');
            const threshold = parseFloat('${{ env.MIN_COVERAGE_THRESHOLD }}');
            
            if (coverage >= threshold) {
              core.notice(`✅ Code Coverage Report: ${coverage.toFixed(2)}% (Passes threshold: ${threshold}%)`, {title: 'Coverage Results'});
            } else {
              core.warning(`⚠️ Code Coverage Report: ${coverage.toFixed(2)}% (Below threshold: ${threshold}%)`, {title: 'Coverage Results'});
            }

      - name: Create Success Summary
        if: steps.sonarqube.outputs.sonar_exit_code == '0' && steps.sonarqube.outputs.coverage_int >= steps.sonarqube.outputs.threshold_int
        run: |
          echo "## ✅ Code Approved: Coverage ${{ steps.sonarqube.outputs.coverage_percent }}% meets threshold!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Coverage:** ${{ steps.sonarqube.outputs.coverage_percent }}% (Threshold: ${{ env.MIN_COVERAGE_THRESHOLD }}%)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Full SonarQube Report](${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }})" >> $GITHUB_STEP_SUMMARY

      - name: Create Failure Summary
        if: steps.sonarqube.outputs.sonar_exit_code != '0' || steps.sonarqube.outputs.coverage_int < steps.sonarqube.outputs.threshold_int
        run: |
          echo "## ⚠️ Code Coverage Below Threshold: ${{ steps.sonarqube.outputs.coverage_percent }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Coverage:** ${{ steps.sonarqube.outputs.coverage_percent }}% (Threshold: ${{ env.MIN_COVERAGE_THRESHOLD }}%)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please improve test coverage before merging!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Analysis Results](${{ env.COMPLETION_URL }})" >> $GITHUB_STEP_SUMMARY

      - name: Show Success Popup
        if: steps.sonarqube.outputs.sonar_exit_code == '0' && steps.sonarqube.outputs.coverage_int >= steps.sonarqube.outputs.threshold_int
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = parseFloat('${{ steps.sonarqube.outputs.coverage_percent }}');
            core.notice(`✅ Code Coverage: ${coverage.toFixed(2)}% - Passed Threshold!`, {title: 'SonarQube Check Success'})

      - name: Show Failure Popup
        if: steps.sonarqube.outputs.sonar_exit_code != '0' || steps.sonarqube.outputs.coverage_int < steps.sonarqube.outputs.threshold_int
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = parseFloat('${{ steps.sonarqube.outputs.coverage_percent }}');
            const threshold = parseFloat('${{ env.MIN_COVERAGE_THRESHOLD }}');
            core.error(`⚠️ Code Coverage: ${coverage.toFixed(2)}% - Below Threshold of ${threshold}%`, {title: 'SonarQube Check Failed'})

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.sonarqube.outputs.sonar_exit_code == '0' && steps.sonarqube.outputs.coverage_int >= steps.sonarqube.outputs.threshold_int
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = parseFloat('${{ steps.sonarqube.outputs.coverage_percent }}').toFixed(2);
            const comment = `## ✅ Code Approved!
            
            **SonarQube Analysis passed with ${coverage}% coverage**
            
            The code quality meets all requirements and is ready for review.
            [View Full Report](${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment Failed Analysis on PR
        if: github.event_name == 'pull_request' && (steps.sonarqube.outputs.sonar_exit_code != '0' || steps.sonarqube.outputs.coverage_int < steps.sonarqube.outputs.threshold_int)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = parseFloat('${{ steps.sonarqube.outputs.coverage_percent }}').toFixed(2);
            const threshold = parseFloat('${{ env.MIN_COVERAGE_THRESHOLD }}').toFixed(2);
            const comment = `## ⚠️ Code Coverage Check Needs Attention
            
            **Current coverage is ${coverage}% (Required: ${threshold}%)**
            
            Please add more tests to increase code coverage before merging.
            [View Details](${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Create Success Issue
        if: steps.sonarqube.outputs.sonar_exit_code == '0' && steps.sonarqube.outputs.coverage_int >= steps.sonarqube.outputs.threshold_int
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = parseFloat('${{ steps.sonarqube.outputs.coverage_percent }}').toFixed(2);
            const repo = context.repo;
            const repoName = '${{ github.repository }}';
            const sha = context.sha.substring(0, 7);
            const branchName = '${{ github.ref_name }}';
            const sonarUrl = '${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}';
            console.log("Generated Sonar URL:", sonarUrl)
            await github.rest.issues.create({
              owner: repo.owner,
              repo: repo.repo,
              title: `✅ Code Passed! SonarQube Analysis Success - Coverage: ${coverage}%`,
              body: `## ✅ Code Passed! SonarQube Analysis Success Notification\n\n**Repository:** ${repoName}\n**Branch:** ${branchName}\n**Commit:** ${sha}\n**Coverage:** ${coverage}% (Threshold: ${{ env.MIN_COVERAGE_THRESHOLD }}%)\n\nCongratulations! Your code has passed the SonarQube analysis with excellent code coverage.\n\n### Details\n- The code coverage exceeds the minimum threshold of ${{ env.MIN_COVERAGE_THRESHOLD }}%\n- Analysis was completed successfully\n\n### Links\n- [View Full Report](${sonarUrl})\n- [View Commit](https://github.com/${repoName}/commit/${context.sha})\n\nGreat work! Keep up the good testing practices.`,
              labels: ['quality-gate-success', 'high-coverage', 'code-passed']
            });
            console.log('Created success issue for SonarQube analysis');

      - name: Create Failed Issue
        if: steps.sonarqube.outputs.sonar_exit_code != '0' || steps.sonarqube.outputs.coverage_int < steps.sonarqube.outputs.threshold_int
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = parseFloat('${{ steps.sonarqube.outputs.coverage_percent }}' || '0').toFixed(2);
            const exitCode = '${{ steps.sonarqube.outputs.sonar_exit_code }}';
            const repo = context.repo;
            const repoName = '${{ github.repository }}';
            const sha = context.sha.substring(0, 7);
            const branchName = '${{ github.ref_name }}';
            const sonarUrl = '${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}';
            console.log("Generated Sonar URL:", sonarUrl)
            let failureReason = '';
            let issueTitle = 'SonarQube Analysis Report';
            let issueLabels = [];
            if (exitCode !== '0') {
              failureReason = 'SonarQube analysis execution failed.';
              issueTitle = `⚠️ SonarQube Analysis Failed - Exit Code: ${exitCode}`;
              issueLabels = ['quality-gate-failure', 'needs-attention', 'sonarqube-failure'];
            } else if (parseFloat(coverage) < parseFloat('${{ env.MIN_COVERAGE_THRESHOLD }}')) {
              failureReason = `Code coverage (${coverage}%) is below the minimum threshold of ${{ env.MIN_COVERAGE_THRESHOLD }}%.`;
              issueTitle = `⚠️ SonarQube Analysis - Coverage Below Threshold: ${coverage}%`;
              issueLabels = ['quality-gate-failure', 'needs-attention', 'coverage-issue'];
            }
            let links = `- [View Workflow Run](https://github.com/${repoName}/actions/runs/${{ github.run_id }})\n- [View Commit](https://github.com/${repoName}/commit/${context.sha})`;
            if (exitCode === '0') {
              links += `\n- [View Full Report](${sonarUrl})`;
            }
            let body = `## SonarQube Analysis Report\n\n**Repository:** ${repoName}\n**Branch:** ${branchName}\n**Commit:** ${sha}\n**Coverage:** ${coverage}% (Threshold: ${{ env.MIN_COVERAGE_THRESHOLD }}%)`;
            if (exitCode !== '0' || parseFloat(coverage) < parseFloat('${{ env.MIN_COVERAGE_THRESHOLD }}')) {
                body += `\n\n### Failure Reason\n${failureReason}\n\n### Recommended Actions\n${exitCode !== '0' ? '- Check the workflow logs for specific error details.\n- Verify SonarQube connection settings.\n- Ensure required secrets are properly configured.' : '- Add more unit tests to increase code coverage.\n- Review untested code areas.\n- Consider implementing test-driven development practices.'}`
            }
            body += `\n\n### Links\n${links}\n\nPlease address these issues before merging this code.`
            await github.rest.issues.create({
              owner: repo.owner,
              repo: repo.repo,
              title: issueTitle,
              body: body,
              labels: issueLabels
            });
            console.log('Created issue for SonarQube analysis.');
