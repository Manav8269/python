name: SonarQube Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  WORKSPACE: ${{ github.workspace }}
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  PYTHONUTF8: 1
  NODE_VERSION: '18'
  SONAR_SCANNER_VERSION: "5.0.1.3006"

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      checks: write
      pull-requests: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Detect Project Type
        id: detect
        run: |
          echo "PYTHON_PROJECT=false" >> $GITHUB_ENV
          echo "JS_PROJECT=false" >> $GITHUB_ENV
          if [ -f "package.json" ]; then
            echo "JS_PROJECT=true" >> $GITHUB_ENV
          fi
          if find . -name '*.py' | grep -q .; then
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
            PY_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')" 2>/dev/null || echo "3.8")
            echo "PYTHON_VERSION=$PY_VERSION" >> $GITHUB_ENV
          fi

      - name: Setup Node.js (for JavaScript projects)
        if: env.JS_PROJECT == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install JavaScript Dependencies & Run Tests
        if: env.JS_PROJECT == 'true' && hash npm 2>/dev/null && [ -f "package.json" ]
        run: |
          npm install --no-audit --no-fund --loglevel=error
          mkdir -p test-results coverage
          npx jest --coverage --passWithNoTests || echo "JS tests completed with warnings"
      
      - name: Install Python Dependencies
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install coverage pytest pytest-cov

      - name: Run Python Tests
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pytest --cov=. --cov-report=xml:coverage.xml --junitxml=junit-results.xml -v || echo "Python tests completed with warnings"
          [ -f "coverage.xml" ] || { echo "Generating empty coverage.xml"; echo '<coverage/>' > coverage.xml; }
          [ -f "junit-results.xml" ] || { echo "Generating empty junit-results.xml"; echo '<testsuites/>' > junit-results.xml; }

      - name: Install SonarScanner
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip
          SCANNER_DIR="$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION"
          mkdir -p "$HOME/.sonar"
          curl -sSLo /tmp/sonar-scanner.zip \
            "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
          unzip -q /tmp/sonar-scanner.zip -d /tmp/
          mv "/tmp/sonar-scanner-$SONAR_SCANNER_VERSION-linux" "$SCANNER_DIR"
          rm /tmp/sonar-scanner.zip
          echo "$SCANNER_DIR/bin" >> $GITHUB_PATH
          echo "SONAR_SCANNER_HOME=$SCANNER_DIR" >> $GITHUB_ENV

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.projectName=$SONAR_PROJECT_NAME \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=. \
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/** \
            -Dsonar.coverage.exclusions=**/test/**

      - name: Check Code Coverage
        run: |
          echo "Fetching SonarQube results..."
          curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=coverage" > sonar-report.json
          
          COVERAGE=$(jq -r '.component.measures[] | select(.metric == "coverage") | .value' sonar-report.json)
          echo "Code Coverage: $COVERAGE%"
          
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "COVERAGE_BELOW_THRESHOLD=true" >> $GITHUB_ENV
          else
            echo "COVERAGE_BELOW_THRESHOLD=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub Issue If Coverage Is Low
        if: env.COVERAGE_BELOW_THRESHOLD == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "ðŸš¨ Low Code Coverage Alert",
              body: "Code coverage is below the required 80% threshold. Please improve test coverage to maintain quality.\n\nCurrent coverage: **${{ env.COVERAGE }}%**",
              labels: ["code-quality", "coverage"]
            })
