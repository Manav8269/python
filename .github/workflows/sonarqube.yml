name: CI/CD with SonarQube and Django

on:
  push:
    branches:
      - main

permissions:
  issues: write

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    outputs:
      quality_gate: ${{ steps.quality_gate.outputs.status }}

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 📂 Locate Django Project
        id: find_project
        run: |
          PROJECT_DIR=$(find . -name manage.py -printf '%h\n' | head -n 1)
          [ -z "$PROJECT_DIR" ] && echo "❌ ERROR: manage.py not found!" && exit 1
          echo "PROJECT_DIR=${PROJECT_DIR}" >> $GITHUB_ENV
          echo "PROJECT_BASE=$(dirname "${PROJECT_DIR}")" >> $GITHUB_ENV
          echo "PYTHONPATH=${PROJECT_BASE}" >> $GITHUB_ENV
          echo "✅ Found Django project at: ${PROJECT_DIR}"
      - name: 📞 Install Dependencies
        run: |
          cd "$PROJECT_DIR"
          pip install --upgrade pip
          pip install pytest coverage django jq
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
      - name: 📊 Run Tests and Generate Coverage
        run: |
          cd "$PROJECT_DIR"
          python -m coverage run --source=. manage.py test || true
          python -m coverage xml -o coverage.xml
          if [ ! -f "coverage.xml" ]; then
            echo "❌ Coverage file not generated! Creating empty one..."
            echo '<coverage version="1.0"></coverage>' > coverage.xml
          fi
          echo "Coverage report generated at:"
          ls -la coverage.xml
      - name: 🛠️ Install SonarScanner
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH
      - name: 🔎 Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://501e-27-107-135-240.ngrok-free.app"
        run: |
          cd "$PROJECT_DIR"
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=my-django-project \
            -Dsonar.sources=. \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.login="$SONAR_TOKEN" \
            -Dsonar.python.version=3.9 \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.working.directory="$PROJECT_DIR/.scannerwork"
      - name: 📊 Check SonarQube Quality Gate
        id: quality_gate
        run: |
          STATUS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=my-django-project" | jq -r .projectStatus.status)
          echo "status=$STATUS" >> $GITHUB_OUTPUT
  notify:
    runs-on: ubuntu-latest
    needs: build-and-analyze
    steps:
      - name: 📢 Notify via GitHub Issues
        run: |
          if [[ "${{ needs.build-and-analyze.outputs.quality_gate }}" == "OK" ]]; then
            gh issue create --title "CI/CD Success" --body "✅ Workflow succeeded, quality gate passed. Code pushed." --repo $GITHUB_REPOSITORY
          else
            gh issue create --title "CI/CD Failed" --body "❌ Workflow failed, quality gate did not pass. Changes reverted." --repo $GITHUB_REPOSITORY
          fi  # Added missing fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📧 Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "CI/CD Workflow Status"
          to: guptamanav8269@gmail.com
          from: "CI/CD Pipeline"
          body: |
            Workflow status: 
            ${{ needs.build-and-analyze.outputs.quality_gate == 'OK' && '✅ Code pushed to repo.' || '❌ Changes reverted due to low quality score.' }}
  revert:
    runs-on: ubuntu-latest
    needs: build-and-analyze
    if: ${{ needs.build-and-analyze.outputs.quality_gate != 'OK' }}
    steps:
      - name: ⏪ Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: true  # Added for push permissions

      - name: ⏪ Revert Changes Locally
        run: |
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            git reset --hard HEAD~1
            git push origin main --force
            echo "🔄 Changes reverted due to failing quality gate."
          else
            echo "⚠️ No previous commit found to revert."
          fi  # Removed extraneous text
