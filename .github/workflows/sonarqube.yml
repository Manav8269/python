name: SonarQube Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  WORKSPACE: ${{ github.workspace }}
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  PYTHONUTF8: 1
  NODE_VERSION: '18'
  SONAR_SCANNER_VERSION: "5.0.1.3006"

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      checks: write
      pull-requests: read
      issues: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Detect Project Type
        id: detect
        run: |
          echo "PYTHON_PROJECT=false" >> $GITHUB_ENV
          echo "REACT_PROJECT=false" >> $GITHUB_ENV
          echo "ANGULAR_PROJECT=false" >> $GITHUB_ENV

          if find . -name '*.jsx' -o -name '*.tsx' -o -name '*.test.js' -o -name '*.test.tsx' | grep -q .; then
            echo "REACT_PROJECT=true" >> $GITHUB_ENV
            echo "SOURCE_DIR=$(find . -name '*.jsx' -o -name '*.tsx' | head -1 | xargs dirname)" >> $GITHUB_ENV
          fi

          if [ -f "angular.json" ]; then
            echo "ANGULAR_PROJECT=true" >> $GITHUB_ENV
            echo "SOURCE_DIR=src" >> $GITHUB_ENV
          fi

          if find . -name '*.py' | grep -q .; then
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
            PY_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')" 2>/dev/null || echo "3.8")
            echo "PYTHON_VERSION=$PY_VERSION" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Initialize JavaScript Project
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        run: |
          if [ ! -f "package.json" ]; then
            npm init -y
            
            if [ "$REACT_PROJECT" == "true" ]; then
              npm install react react-dom @testing-library/react @testing-library/jest-dom jest jest-environment-jsdom jest-junit babel-jest @babel/preset-env @babel/preset-react --save-dev
              
              echo '{
                "presets": [
                  "@babel/preset-env",
                  ["@babel/preset-react", { "runtime": "automatic" }]
                ]
              }' > babel.config.json

              echo 'import "@testing-library/jest-dom";' > jest.setup.js
            else
              npm install jest jest-junit --save-dev
            fi

            echo '{
              "collectCoverage": true,
              "coverageReporters": ["lcov", "text"],
              "testEnvironment": "jsdom",
              "setupFilesAfterEnv": ["<rootDir>/jest.setup.js"],
              "transform": {
                "^.+\\.[jt]sx?$": "babel-jest"
              },
              "moduleNameMapper": {
                "\\.(css|less|scss|sass)$": "identity-obj-proxy"
              },
              "reporters": [
                "default",
                ["jest-junit", { 
                  "outputDirectory": "test-results",
                  "outputName": "jest-junit.xml",
                  "suiteName": "jest tests",
                  "classNameTemplate": "{classname}",
                  "titleTemplate": "{title}",
                  "ancestorSeparator": " > ",
                  "usePathForSuiteName": "true"
                }]
              ]
            }' > jest.config.json
          fi

          if [ ! -f "package-lock.json" ] && [ ! -f "yarn.lock" ]; then
            npm install --package-lock-only --no-audit --no-fund --loglevel=error
          fi

          npm install --no-audit --no-fund --loglevel=error

      - name: Run JavaScript Tests
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        run: |
          mkdir -p test-results coverage
          
          npx jest --coverage --passWithNoTests --collectCoverageFrom="**/*.{js,jsx,ts,tsx}" || echo "Tests completed with warnings"
          
          if [ ! -f "coverage/lcov.info" ]; then
            echo "TN:" > coverage/lcov.info
            find . -name '*.jsx' -o -name '*.tsx' -o -name '*.js' -o -name '*.ts' | while read file; do
              echo "SF:$file" >> coverage/lcov.info
              echo "end_of_record" >> coverage/lcov.info
            done
          fi
          
          if [ ! -f "test-results/jest-junit.xml" ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?>
            <testsuites name="jest tests">
              <testsuite name="jest tests" tests="0" failures="0" errors="0" skipped="0" timestamp="$(date +%Y-%m-%dT%H:%M:%S)" time="0">
              </testsuite>
            </testsuites>' > test-results/jest-junit.xml
          fi

          # Convert jest-junit format to SonarQube expected format
          if [ -f "test-results/jest-junit.xml" ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?>
            <testExecutions version="1">' > test-results/sonar-test.xml
            
            # Extract test cases from jest-junit.xml and reformat for SonarQube
            grep -o '<testcase .*/>' test-results/jest-junit.xml | while read -r testcase; do
              classname=$(echo "$testcase" | grep -o 'classname="[^"]*"' | cut -d'"' -f2)
              name=$(echo "$testcase" | grep -o 'name="[^"]*"' | cut -d'"' -f2)
              time=$(echo "$testcase" | grep -o 'time="[^"]*"' | cut -d'"' -f2)
              
              # Get file path from classname (simplified example)
              filepath=$(echo "$classname" | tr '.' '/').js
              
              echo '  <testCase name="'"$name"'" duration="'"$time"'" status="passed" file="'"$filepath"'"/>' >> test-results/sonar-test.xml
            done
            
            echo '</testExecutions>' >> test-results/sonar-test.xml
          fi

      - name: Install Python Dependencies
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install coverage pytest pytest-cov

      - name: Run Python Tests
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pytest --cov=. --cov-report=xml:coverage.xml --junitxml=junit-results.xml -v || echo "Python tests completed with warnings"
          [ -f "coverage.xml" ] || { echo "Generating empty coverage.xml"; echo '<coverage/>' > coverage.xml; }
          [ -f "junit-results.xml" ] || { echo "Generating empty junit-results.xml"; echo '<testsuites/>' > junit-results.xml; }

      - name: Install SonarScanner
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip
          SCANNER_DIR="$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION"
          mkdir -p "$HOME/.sonar"
          curl -sSLo /tmp/sonar-scanner.zip \
            "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
          unzip -q /tmp/sonar-scanner.zip -d /tmp/
          mv "/tmp/sonar-scanner-$SONAR_SCANNER_VERSION-linux" "$SCANNER_DIR"
          rm /tmp/sonar-scanner.zip
          echo "$SCANNER_DIR/bin" >> $GITHUB_PATH
          echo "SONAR_SCANNER_HOME=$SCANNER_DIR" >> $GITHUB_ENV

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Preparing SonarQube analysis..."
          properties=(
            "-Dsonar.projectKey=$SONAR_PROJECT_KEY"
            "-Dsonar.projectName=$SONAR_PROJECT_NAME"
            "-Dsonar.host.url=$SONAR_HOST_URL"
            "-Dsonar.login=$SONAR_TOKEN"
            "-Dsonar.sourceEncoding=UTF-8"
            "-Dsonar.scm.provider=git"
            "-Dsonar.scm.revision=$GITHUB_SHA"
            "-Dsonar.working.directory=$RUNNER_TEMP/.sonar"
            "-Dsonar.sources=."
            "-Dsonar.tests=."
            "-Dsonar.test.inclusions=**/*.test.*,**/__tests__/**/*.*"
            "-Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**"
          )

          if [ "$REACT_PROJECT" == "true" ] || [ "$ANGULAR_PROJECT" == "true" ]; then
            properties+=(
              "-Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"
              "-Dsonar.typescript.lcov.reportPaths=coverage/lcov.info"
              "-Dsonar.testExecutionReportPaths=test-results/sonar-test.xml"
            )
          fi

          if [ "$PYTHON_PROJECT" == "true" ]; then
            properties+=(
              "-Dsonar.python.coverage.reportPaths=coverage.xml"
              "-Dsonar.python.xunit.reportPath=junit-results.xml"
            )
          fi

          if [ "$REACT_PROJECT" == "true" ]; then
            properties+=(
              "-Dsonar.javascript.react.reactEnabled=true"
              "-Dsonar.javascript.file.suffixes=.js,.jsx"
              "-Dsonar.typescript.file.suffixes=.ts,.tsx"
            )
          elif [ "$ANGULAR_PROJECT" == "true" ]; then
            properties+=(
              "-Dsonar.angular.enabled=true"
              "-Dsonar.typescript.file.suffixes=.ts"
            )
          fi

          echo "Running SonarScanner with:"
          printf '%s\n' "${properties[@]}"
          
          sonar-scanner "${properties[@]}"
          echo "SonarQube analysis completed with status $?"
          
      - name: Fetch Coverage Data
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Fetching coverage data from SonarQube..."
          PROJECT_KEY="${{ github.repository_owner }}_${{ github.event.repository.name }}"
          API_URL="$SONAR_HOST_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=coverage,lines_to_cover,uncovered_lines,line_coverage,branch_coverage,conditions_to_cover,uncovered_conditions"
          
          RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$API_URL")
          echo "Coverage API Response: $RESPONSE"
          
          # Extract coverage metrics
          COVERAGE=$(echo "$RESPONSE" | jq -r '.component.measures[] | select(.metric=="coverage") | .value')
          LINES_TO_COVER=$(echo "$RESPONSE" | jq -r '.component.measures[] | select(.metric=="lines_to_cover") | .value')
          UNCOVERED_LINES=$(echo "$RESPONSE" | jq -r '.component.measures[] | select(.metric=="uncovered_lines") | .value')
          LINE_COVERAGE=$(echo "$RESPONSE" | jq -r '.component.measures[] | select(.metric=="line_coverage") | .value')
          
          # Default values in case metrics are missing
          [ -z "$COVERAGE" ] || [ "$COVERAGE" == "null" ] && COVERAGE="0"
          [ -z "$LINES_TO_COVER" ] || [ "$LINES_TO_COVER" == "null" ] && LINES_TO_COVER="0"
          [ -z "$UNCOVERED_LINES" ] || [ "$UNCOVERED_LINES" == "null" ] && UNCOVERED_LINES="0"
          [ -z "$LINE_COVERAGE" ] || [ "$LINE_COVERAGE" == "null" ] && LINE_COVERAGE="0"
          
          # Calculate covered lines
          COVERED_LINES=$((LINES_TO_COVER - UNCOVERED_LINES))
          
          # Save metrics to environment for use in later steps
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "LINES_TO_COVER=$LINES_TO_COVER" >> $GITHUB_ENV
          echo "COVERED_LINES=$COVERED_LINES" >> $GITHUB_ENV
          echo "UNCOVERED_LINES=$UNCOVERED_LINES" >> $GITHUB_ENV
          echo "LINE_COVERAGE=$LINE_COVERAGE" >> $GITHUB_ENV
          
          # Get the names of files with the lowest coverage
          FILES_API_URL="$SONAR_HOST_URL/api/measures/component_tree?component=$PROJECT_KEY&metricKeys=coverage&strategy=leaves&s=coverage&asc=true&ps=5"
          FILES_RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$FILES_API_URL")
          
          echo "Files with lowest coverage:" > coverage_report.txt
          echo "$FILES_RESPONSE" | jq -r '.components[] | "\(.name): \(.measures[0].value)%"' >> coverage_report.txt
          cat coverage_report.txt
      
      - name: Create Coverage GitHub Issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the repository name for the issue title
          REPO_NAME="${{ github.repository }}"
          
          # Create a label for the coverage report if it doesn't exist
          gh label create "coverage-report" --color "#0E8A16" --description "Code coverage report" --force || true
          
          # Format date for the report
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          
          # Determine if we had 100% coverage
          IS_PERFECT="false"
          if (( $(echo "$COVERAGE >= 100" | bc -l) )); then
            IS_PERFECT="true"
          fi
          
          # Choose emoji based on coverage
          if [ "$IS_PERFECT" == "true" ]; then
            STATUS_EMOJI="🎉"
            TITLE="$STATUS_EMOJI Code Coverage Report: 100% - $REPO_NAME ($DATE)"
            LABEL="coverage-report,good-first-issue"
          elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            STATUS_EMOJI="✅"
            TITLE="$STATUS_EMOJI Code Coverage Report: $COVERAGE% - $REPO_NAME ($DATE)"
            LABEL="coverage-report,enhancement"
          elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
            STATUS_EMOJI="⚠️"
            TITLE="$STATUS_EMOJI Code Coverage Report: $COVERAGE% - $REPO_NAME ($DATE)"
            LABEL="coverage-report,help-wanted"
          else
            STATUS_EMOJI="🚨"
            TITLE="$STATUS_EMOJI Code Coverage Report: $COVERAGE% - $REPO_NAME ($DATE)"
            LABEL="coverage-report,bug"
          fi
          
          # Create GitHub issue content
          BODY="## Code Coverage Report for $REPO_NAME
          
          ### Coverage Summary ($DATE)
          
          $STATUS_EMOJI **Overall Coverage**: $COVERAGE%
          - **Lines to Cover**: $LINES_TO_COVER
          - **Covered Lines**: $COVERED_LINES
          - **Uncovered Lines**: $UNCOVERED_LINES
          - **Line Coverage**: $LINE_COVERAGE%
          
          ### Files with Lowest Coverage
          
          $(cat coverage_report.txt)
          
          ### Build Information
          
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Triggered By**: ${{ github.actor }}
          - **Workflow Run**: [View details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **SonarQube Dashboard**: [$SONAR_PROJECT_KEY](${{ secrets.SONAR_HOST_URL }}/dashboard?id=$SONAR_PROJECT_KEY)
          
          $([ "$IS_PERFECT" == "true" ] && echo "🎉 **Congratulations! You've achieved 100% code coverage.**" || echo "⚡ **Coverage goal: 100%**")
          
          $([ "$IS_PERFECT" == "true" ] || echo "### Recommendations
          
          - Review files with low coverage
          - Add tests for uncovered lines
          - Focus on testing critical code paths first")
          
          ---
          *This report was automatically generated by the SonarQube Code Analysis workflow.*"
          
          # Create GitHub issue
          gh issue create --title "$TITLE" \
                         --body "$BODY" \
                         --label "$LABEL" \
                         --repo ${{ github.repository }}
                         
      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "[${{ github.repository }}] Code Coverage Report: ${{ env.COVERAGE }}%"
          to: ${{ secrets.MAIL_RECIPIENT }}
          from: GitHub Actions <${{ secrets.MAIL_FROM }}>
          body: |
            Code Coverage Report for ${{ github.repository }}
            
            Overall Coverage: ${{ env.COVERAGE }}%
            
            Lines to Cover: ${{ env.LINES_TO_COVER }}
            Covered Lines: ${{ env.COVERED_LINES }}
            Uncovered Lines: ${{ env.UNCOVERED_LINES }}
            Line Coverage: ${{ env.LINE_COVERAGE }}%
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Triggered By: ${{ github.actor }}
            
            View the GitHub issue for more details: 
            https://github.com/${{ github.repository }}/issues
            
            View the workflow run:
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
