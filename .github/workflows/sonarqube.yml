name: SonarQube Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  WORKSPACE: ${{ github.workspace }}
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  PYTHONUTF8: 1
  NODE_VERSION: '18'
  SONAR_SCANNER_VERSION: "5.0.1.3006"

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      checks: write
      pull-requests: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Detect Project Type
        id: detect
        run: |
          echo "PYTHON_PROJECT=false" >> $GITHUB_ENV
          echo "JS_PROJECT=false" >> $GITHUB_ENV
          
          if find . -name '*.js' -o -name '*.jsx' -o -name '*.ts' -o -name '*.tsx' | grep -q .; then
            echo "JS_PROJECT=true" >> $GITHUB_ENV
          fi
          if find . -name '*.py' | grep -q .; then
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        if: env.JS_PROJECT == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install JavaScript Dependencies & Run Tests
        if: env.JS_PROJECT == 'true'
        run: |
          if [ -f "package.json" ]; then
            npm install --no-audit --no-fund --loglevel=error
            mkdir -p test-results coverage
            npx jest --coverage --passWithNoTests || echo "JS tests completed with warnings"
          fi

      - name: Install Python Dependencies
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install coverage pytest pytest-cov

      - name: Run Python Tests
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pytest --cov=. --cov-report=xml:coverage.xml --junitxml=junit-results.xml -v || echo "Python tests completed with warnings"

      - name: Install SonarScanner
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip
          SCANNER_DIR="$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION"
          mkdir -p "$HOME/.sonar"
          curl -sSLo /tmp/sonar-scanner.zip \
            "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
          unzip -q /tmp/sonar-scanner.zip -d /tmp/
          mv "/tmp/sonar-scanner-$SONAR_SCANNER_VERSION-linux" "$SCANNER_DIR"
          rm /tmp/sonar-scanner.zip
          echo "$SCANNER_DIR/bin" >> $GITHUB_PATH
          echo "SONAR_SCANNER_HOME=$SCANNER_DIR" >> $GITHUB_ENV

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.projectName=$SONAR_PROJECT_NAME \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.scm.provider=git \
            -Dsonar.sources=. \
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**

          if [ "$JS_PROJECT" == "true" ]; then
            sonar-scanner \
              -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
              -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
          fi
          if [ "$PYTHON_PROJECT" == "true" ]; then
            sonar-scanner \
              -Dsonar.python.coverage.reportPaths=coverage.xml \
              -Dsonar.python.xunit.reportPath=junit-results.xml
          fi

      - name: Check Coverage & Create GitHub Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking SonarQube coverage..."
          COVERAGE=$(curl -s "$SONAR_HOST_URL/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=coverage" \
            -u "$SONAR_TOKEN:" | jq -r '.component.measures[] | select(.metric == "coverage") | .value')
          
          if [ -z "$COVERAGE" ]; then
            echo "Coverage data not found."
            COVERAGE=0
          fi
          
          echo "Code Coverage: $COVERAGE%"
          
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "✅ Code coverage is above 80%. Creating a success issue..."
            gh issue create --title "Code Coverage Passed ✅" \
              --body "Code coverage is $COVERAGE%. SonarQube analysis passed!" \
              --label "coverage"
          else
            echo "❌ Code coverage is below 80%. Creating a failure issue..."
            gh issue create --title "Code Coverage Failed ❌" \
              --body "Code coverage is $COVERAGE%. Please improve test coverage." \
              --label "coverage"
          fi
