name: SonarQube Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  SONAR_SCANNER_VERSION: "5.0.1.3006"

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      checks: write
      pull-requests: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Detect Project Type
        id: detect
        run: |
          echo "PYTHON_PROJECT=false" >> $GITHUB_ENV
          echo "JS_PROJECT=false" >> $GITHUB_ENV
          echo "ANGULAR_PROJECT=false" >> $GITHUB_ENV
          
          if find . -name '*.py' | grep -q .; then
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
          fi
          if find . -name '*.js' -o -name '*.jsx' -o -name '*.ts' -o -name '*.tsx' | grep -q .; then
            echo "JS_PROJECT=true" >> $GITHUB_ENV
          fi
          if [ -f "angular.json" ]; then
            echo "ANGULAR_PROJECT=true" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        if: env.JS_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install JavaScript Dependencies & Run Tests
        if: env.JS_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        run: |
          npm install --no-audit --no-fund --loglevel=error
          mkdir -p test-results coverage
          npx jest --coverage --passWithNoTests || echo "JS tests completed with warnings"

      - name: Install Python Dependencies & Run Tests
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install coverage pytest pytest-cov
          mkdir -p test-results coverage
          python -m pytest --cov=. --cov-report=xml:coverage.xml --junitxml=junit-results.xml || echo "Python tests completed with warnings"

      - name: Install SonarScanner
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip
          SCANNER_DIR="$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION"
          mkdir -p "$HOME/.sonar"
          curl -sSLo /tmp/sonar-scanner.zip \
            "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
          unzip -q /tmp/sonar-scanner.zip -d /tmp/
          mv "/tmp/sonar-scanner-$SONAR_SCANNER_VERSION-linux" "$SCANNER_DIR"
          rm /tmp/sonar-scanner.zip
          echo "$SCANNER_DIR/bin" >> $GITHUB_PATH

      - name: Run SonarQube Analysis
        id: sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          properties=(
            "-Dsonar.projectKey=$SONAR_PROJECT_KEY"
            "-Dsonar.projectName=$SONAR_PROJECT_NAME"
            "-Dsonar.host.url=$SONAR_HOST_URL"
            "-Dsonar.login=$SONAR_TOKEN"
            "-Dsonar.sources=."
            "-Dsonar.tests=."
            "-Dsonar.test.inclusions=**/*.test.*,**/__tests__/**/*.*"
            "-Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**"
          )
          if [ "$JS_PROJECT" == "true" ]; then
            properties+=(
              "-Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"
            )
          fi
          if [ "$PYTHON_PROJECT" == "true" ]; then
            properties+=(
              "-Dsonar.python.coverage.reportPaths=coverage.xml"
              "-Dsonar.python.xunit.reportPath=junit-results.xml"
            )
          fi
          sonar-scanner "${properties[@]}"

      - name: Fetch SonarQube Coverage
        id: coverage_check
        run: |
          sleep 10  # Give SonarQube some time to process results
          COVERAGE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=coverage" | jq -r '.component.measures[0].value // "0"')

          echo "Coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "COVERAGE_STATUS=passed" >> $GITHUB_ENV
          else
            echo "COVERAGE_STATUS=failed" >> $GITHUB_ENV
          fi

      - name: Create GitHub Issue for Low Coverage
        if: env.COVERAGE_STATUS == 'failed'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "⚠️ Code Coverage Below 80%",
              body: "The latest SonarQube analysis shows that the code coverage is below 80%. Please improve test coverage to meet the minimum threshold.\n\n> **Coverage Report**: ${{ env.COVERAGE }}%\n\n### Suggested Actions:\n- Add more unit tests\n- Improve existing tests\n- Ensure all critical files are tested\n\n🚀 **Happy Coding!**",
              labels: ["code-quality", "coverage"]
            })
