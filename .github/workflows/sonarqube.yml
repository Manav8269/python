name: SonarQube CI/CD Pipeline with Coverage Threshold

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  analyze:
    name: Analyze and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Detect Project Type
        id: detect
        run: |
          echo "PYTHON_PROJECT=false" >> $GITHUB_ENV
          echo "REACT_PROJECT=false" >> $GITHUB_ENV
          echo "ANGULAR_PROJECT=false" >> $GITHUB_ENV

          if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
            echo "PYTHON_VERSION=$(python3 --version | awk '{print $2}')" >> $GITHUB_ENV
          fi

          if [ -f "package.json" ]; then
            if grep -q "react" package.json; then
              echo "REACT_PROJECT=true" >> $GITHUB_ENV
            fi
            if grep -q "@angular/core" package.json; then
              echo "ANGULAR_PROJECT=true" >> $GITHUB_ENV
            fi
          fi

      - name: Setup Python
        if: env.PYTHON_PROJECT == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest

      - name: Run Python tests with Coverage
        if: env.PYTHON_PROJECT == 'true'
        run: |
          coverage run -m pytest || true
          coverage report
          coverage xml -o coverage.xml || true

      - name: Install Node.js dependencies
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        run: npm install

      - name: Run JS Tests (Jest) with Coverage
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        run: |
          npm run test -- --coverage || true
          cp coverage/lcov.info ./ || true

      - name: Parse JS Coverage Percentage
        id: coverage
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        run: |
          if [ -f "lcov.info" ]; then
            TOTAL_LINES=$(grep -o "LF:[0-9]*" lcov.info | cut -d':' -f2 | paste -sd+ - | bc)
            COVERED_LINES=$(grep -o "LH:[0-9]*" lcov.info | cut -d':' -f2 | paste -sd+ - | bc)
            if [ "$TOTAL_LINES" -eq 0 ]; then
              COVERAGE_PERCENT=0
            else
              COVERAGE_PERCENT=$(echo "scale=2; $COVERED_LINES*100/$TOTAL_LINES" | bc)
            fi
          else
            COVERAGE_PERCENT=0
          fi
          echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
          echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT

      - name: Download SonarScanner
        run: |
          wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip || \
          wget -O sonar-scanner.zip https://repo1.maven.org/maven2/org/sonarsource/scanner/cli/sonar-scanner-cli/4.7.0.2747/sonar-scanner-cli-4.7.0.2747-linux.zip
          unzip sonar-scanner.zip
          mv sonar-scanner-* sonar-scanner
          echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scan
        id: sonarqube
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.javascript.lcov.reportPaths=lcov.info \
            || echo "sonar_exit_code=1" >> $GITHUB_OUTPUT
          echo "sonar_exit_code=0" >> $GITHUB_OUTPUT

      - name: Coverage Threshold Check
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        run: |
          THRESHOLD=80
          COV=$(echo $COVERAGE_PERCENT | awk '{printf("%d\n",$1 + 0.5)}')
          echo "Coverage: $COV%"
          if [ "$COV" -lt "$THRESHOLD" ]; then
            echo "❌ Code coverage ($COV%) is below the threshold ($THRESHOLD%)" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Code coverage ($COV%) meets the threshold ($THRESHOLD%)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: SonarQube Scan Summary
        run: |
          if [ "${{ steps.sonarqube.outputs.sonar_exit_code }}" == "0" ]; then
            echo "✅ SonarQube scan completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ SonarQube scan failed. Check logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Show Success Popup
        if: steps.sonarqube.outputs.sonar_exit_code == '0'
        run: |
          echo "🎉 SonarQube analysis and tests passed!"
