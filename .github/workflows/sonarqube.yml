name: SonarQube Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  WORKSPACE: ${{ github.workspace }}
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  PYTHONUTF8: 1
  NODE_VERSION: '18'
  SONAR_SCANNER_VERSION: "5.0.1.3006"

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      checks: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Added Node.js setup for React tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      # Added Python setup for Python tests
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      # Modified step to run tests with improved coverage configuration
      - name: Install Dependencies and Run Tests
        run: |
          # For React/JavaScript tests
          if [ -f package.json ]; then
            npm ci
            # Configure Jest to collect coverage from all files, not just those with tests
            npm test -- --coverage --collectCoverageFrom='["src/**/*.{js,jsx,ts,tsx}","!src/**/*.d.ts","!src/reportWebVitals.js","!src/index.js","!src/setupTests.js"]'
          fi
          
          # For Python tests
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest pytest-cov
            # Run tests with coverage for all modules, not just those with tests
            pytest --cov=. --cov-report=xml --cov-report=term --cov-branch
          fi

      - name: Install SonarScanner
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip
          SCANNER_DIR="$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION"
          mkdir -p "$HOME/.sonar"
          curl -sSLo /tmp/sonar-scanner.zip \
            "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
          unzip -q /tmp/sonar-scanner.zip -d /tmp/
          mv "/tmp/sonar-scanner-$SONAR_SCANNER_VERSION-linux" "$SCANNER_DIR"
          rm /tmp/sonar-scanner.zip
          echo "$SCANNER_DIR/bin" >> $GITHUB_PATH
          echo "SONAR_SCANNER_HOME=$SCANNER_DIR" >> $GITHUB_ENV

      # Find test directories for SonarQube
      - name: Find Test Directories
        id: find_test_dirs
        run: |
          # Find test directories (without wildcards)
          TEST_DIRS=""
          
          # Check for typical test directories in JavaScript/TypeScript projects
          for dir in src/test src/__tests__ tests test; do
            if [ -d "$dir" ]; then
              if [ -z "$TEST_DIRS" ]; then
                TEST_DIRS="$dir"
              else
                TEST_DIRS="$TEST_DIRS,$dir"
              fi
            fi
          done
          
          # Check for typical test directories in Python projects
          for dir in tests test; do
            if [ -d "$dir" ]; then
              if [ -z "$TEST_DIRS" ]; then
                TEST_DIRS="$dir"
              else
                TEST_DIRS="$TEST_DIRS,$dir"
              fi
            fi
          done
          
          # If no test directories found, use a safe default
          if [ -z "$TEST_DIRS" ]; then
            TEST_DIRS="."
          fi
          
          echo "TEST_DIRS=$TEST_DIRS" >> $GITHUB_ENV
          echo "Found test directories: $TEST_DIRS"

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running SonarQube analysis..."
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.projectName=$SONAR_PROJECT_NAME \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.scm.provider=git \
            -Dsonar.scm.revision=$GITHUB_SHA \
            -Dsonar.sources=. \
            -Dsonar.tests=${{ env.TEST_DIRS }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**,**/__pycache__/**,**/*.test.js,**/*_test.py,**/test_*.py \
            -Dsonar.coverage.exclusions=**/*.config.js,**/setup*.js,**/vite.config.*,**/.eslintrc.*,**/jest.config.*,**/tests/**,**/test/**,**/__tests__/**,**/__mocks__/**,**/public/**,**/*.d.ts \
            -Dsonar.testExecutionReportPaths=test-report.xml \
            -Dsonar.javascript.coverage.reportPaths=coverage/coverage-summary.json \
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js,**/*_test.py,**/test_*.py \
            -Dsonar.verbose=true

      - name: Check SonarQube Quality Gate Status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Fetching SonarQube quality gate results..."
          PROJECT_KEY="${{ github.repository_owner }}_${{ github.event.repository.name }}"
          API_URL="$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$PROJECT_KEY"
          RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$API_URL")
          echo "SonarQube API Response: $RESPONSE"
          QUALITY_STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')
          COVERAGE=$(echo "$RESPONSE" | jq -r '.projectStatus.conditions[] | select(.metricKey=="coverage") | .value')
          echo "Quality Gate Status: $QUALITY_STATUS"
          echo "Coverage: $COVERAGE%"
          
          # Generate coverage details for PR comment
          COVERAGE_DETAILS=$(echo "$RESPONSE" | jq -r '.projectStatus.conditions[] | select(.metricKey=="coverage") | "Current coverage: \(.value)%, Required: \(.errorThreshold)%"')
          echo "COVERAGE_DETAILS=$COVERAGE_DETAILS" >> $GITHUB_ENV
          
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" == "null" ]; then
            echo "COVERAGE=0" >> $GITHUB_ENV
          else
            echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          fi

      - name: Generate Coverage Report for Uncovered Files
        run: |
          # For JavaScript projects
          if [ -f package.json ]; then
            echo "### JavaScript Files with Low Coverage:" > coverage-report.txt
            if [ -f coverage/lcov.info ]; then
              grep -B 1 "LF:.*LH:0" coverage/lcov.info | grep "SF:" | sed 's/SF:/  - /' >> coverage-report.txt
            else
              echo "  No JavaScript coverage data found" >> coverage-report.txt
            fi
          fi
          
          # For Python projects
          if [ -f coverage.xml ]; then
            echo "### Python Files with Low Coverage:" >> coverage-report.txt
            python -c "
            import xml.etree.ElementTree as ET
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            low_coverage = []
            for pkg in root.findall('.//package'):
                for cls in pkg.findall('.//class'):
                    filename = cls.get('filename')
                    line_rate = float(cls.get('line-rate', 0))
                    if line_rate < 0.5:  # Less than 50% coverage
                        low_coverage.append((filename, line_rate * 100))
            for filename, rate in sorted(low_coverage, key=lambda x: x[1]):
                print(f'  - {filename} ({rate:.1f}%)')
            " >> coverage-report.txt || echo "  Error parsing Python coverage data" >> coverage-report.txt
          fi
          
          cat coverage-report.txt
          echo "UNCOVERED_FILES_REPORT=$(cat coverage-report.txt)" >> $GITHUB_ENV

      - name: Determine Pass/Fail Criteria
        run: |
          COVERAGE=${{ env.COVERAGE }}
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "SONAR_STATUS=success" >> $GITHUB_ENV
            echo "STATUS_EMOJI=✅" >> $GITHUB_ENV
          else
            echo "SONAR_STATUS=failure" >> $GITHUB_ENV
            echo "STATUS_EMOJI=❌" >> $GITHUB_ENV
          fi

      # Add detailed PR comment with coverage info
      - name: Add PR Comment
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          COMMENT="## SonarQube Analysis Results ${{ env.STATUS_EMOJI }}
          
          ${{ env.COVERAGE_DETAILS }}
          
          ${{ env.UNCOVERED_FILES_REPORT }}
          
          [View full report in SonarQube](${{ secrets.SONAR_HOST_URL }}/dashboard?id=$SONAR_PROJECT_KEY)"
          
          gh pr comment $PR_NUMBER --body "$COMMENT"

      # Create labels if they don't exist
      - name: Create Required Labels
        if: env.SONAR_STATUS == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the bug label if it doesn't exist
          gh label create "bug" --color "#d73a4a" --description "Something isn't working" --force || true
          
          # Create the coverage label if it doesn't exist
          gh label create "coverage" --color "#fbca04" --description "Test coverage needs improvement" --force || true

      - name: Create GitHub Issue if Coverage Below 80%
        if: env.SONAR_STATUS == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TITLE="🚨 SonarQube Coverage Below 80%: ${{ github.sha }}"
          LABEL="bug,coverage"
          BODY="SonarQube analysis failed due to insufficient code coverage. ❌  
          🔗 **Branch**: ${{ github.ref }}  
          📂 **Repository**: ${{ github.repository }}  
          🛠 **Triggered By**: ${{ github.actor }}  
          📊 **Code Coverage**: ${{ env.COVERAGE }}% (must be **≥80%**)  
          
          ### Files needing test coverage:
          ${{ env.UNCOVERED_FILES_REPORT }}
          
          ### Recommended actions:
          1. Add tests for untested functions
          2. Focus on testing key business logic
          3. Use code coverage tools locally before pushing
          
          Check the [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
          gh issue create --title "$TITLE" \
                          --body "$BODY" \
                          --label "$LABEL" \
                          --repo ${{ github.repository }}
