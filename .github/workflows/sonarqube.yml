name: CI/CD with SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-coverage:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: react-calculator-master/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('react-calculator-master/package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install React dependencies
        run: |
          cd react-calculator-master
          npm ci

      - name: Install required Babel and Jest dependencies
        run: |
          cd react-calculator-master
          npm install --save-dev @babel/plugin-transform-duplicate-named-capturing-groups-regex
          npm install --save-dev jest

      - name: Run React tests with coverage
        run: |
          cd react-calculator-master
          CI=true npm test -- --coverage --watchAll=false

      - name: Install jq (for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check React coverage
        run: |
          REACT_COVERAGE=$(jq '.total.lines.pct' react-calculator-master/coverage/coverage-summary.json)
          echo "React Coverage: $REACT_COVERAGE%"
          if (( $(echo "$REACT_COVERAGE < 80" | bc -l) )); then exit 1; fi

  sonarqube-scan:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test-and-coverage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarQube Scan
        run: |
          docker run --rm \
            -e SONAR_HOST_URL="https://e83a-27-107-135-240.ngrok-free.app" \
            -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=my-project" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli

      - name: Check SonarQube Quality Gate
        run: |
          echo "Checking SonarQube Quality Gate..."
          STATUS=$(curl -s -u "$SONAR_TOKEN:" "https://e83a-27-107-135-240.ngrok-free.app/api/qualitygates/project_status?projectKey=my-project" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $STATUS"
          if [[ "$STATUS" != "OK" ]]; then exit 1; fi
