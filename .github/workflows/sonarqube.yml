name: SonarQube Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  WORKSPACE: ${{ github.workspace }}
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  PYTHONUTF8: 1
  NODE_VERSION: '18'
  SONAR_SCANNER_VERSION: "5.0.1.3006"

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      checks: write
      pull-requests: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Detect Project Type
        id: detect
        run: |
          echo "PYTHON_PROJECT=false" >> $GITHUB_ENV
          echo "JS_PROJECT=false" >> $GITHUB_ENV
          if find . -name '*.py' | grep -q .; then
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
          fi
          if find . -name '*.js' -o -name '*.ts' -o -name '*.tsx' | grep -q .; then
            echo "JS_PROJECT=true" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        if: env.JS_PROJECT == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run JavaScript Tests
        if: env.JS_PROJECT == 'true' && hash npm 2>/dev/null && [ -f "package.json" ]
        run: |
          echo "Running JavaScript Tests..."
          mkdir -p test-results coverage
          npm install --no-audit --no-fund --loglevel=error
          npx jest --coverage --coverageReporters=lcov --passWithNoTests || echo "JS tests completed with warnings"
          [ -f "coverage/lcov.info" ] || { echo "TN:\nend_of_record" > coverage/lcov.info; }

      - name: Install Python Dependencies
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install coverage pytest pytest-cov

      - name: Run Python Tests
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pytest --cov=. --cov-report=xml:coverage.xml --junitxml=junit-results.xml -v || echo "Python tests completed with warnings"
          [ -f "coverage.xml" ] || { echo "Generating empty coverage.xml"; echo '<coverage/>' > coverage.xml; }
          [ -f "junit-results.xml" ] || { echo "Generating empty junit-results.xml"; echo '<testsuites/>' > junit-results.xml; }

      - name: Install SonarScanner
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip
          SCANNER_DIR="$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION"
          mkdir -p "$HOME/.sonar"
          curl -sSLo /tmp/sonar-scanner.zip \
            "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
          unzip -q /tmp/sonar-scanner.zip -d /tmp/
          mv "/tmp/sonar-scanner-$SONAR_SCANNER_VERSION-linux" "$SCANNER_DIR"
          rm /tmp/sonar-scanner.zip
          echo "$SCANNER_DIR/bin" >> $GITHUB_PATH
          echo "SONAR_SCANNER_HOME=$SCANNER_DIR" >> $GITHUB_ENV

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Preparing SonarQube analysis..."
          properties=(
            "-Dsonar.projectKey=$SONAR_PROJECT_KEY"
            "-Dsonar.projectName=$SONAR_PROJECT_NAME"
            "-Dsonar.host.url=$SONAR_HOST_URL"
            "-Dsonar.login=$SONAR_TOKEN"
            "-Dsonar.sourceEncoding=UTF-8"
            "-Dsonar.scm.provider=git"
            "-Dsonar.scm.revision=$GITHUB_SHA"
            "-Dsonar.working.directory=$RUNNER_TEMP/.sonar"
            "-Dsonar.sources=."
            "-Dsonar.tests=."
            "-Dsonar.test.inclusions=**/*.test.*,**/__tests__/**/*.*"
            "-Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**"
          )
          if [ "$JS_PROJECT" == "true" ]; then
            properties+=( "-Dsonar.javascript.lcov.reportPaths=coverage/lcov.info" )
          fi
          if [ "$PYTHON_PROJECT" == "true" ]; then
            properties+=( "-Dsonar.python.coverage.reportPaths=coverage.xml" "-Dsonar.python.xunit.reportPath=junit-results.xml" )
          fi
          echo "Running SonarScanner with:"
          printf '%s\n' "${properties[@]}"
          sonar-scanner "${properties[@]}"
          echo "SonarQube analysis completed with status $?"

      - name: Evaluate Code Quality and Create GitHub Issue
        if: success()
        run: |
          echo "Checking SonarQube coverage results..."
          COVERAGE=$(grep '<coverage' coverage.xml | grep -o 'line-rate="[0-9.]*"' | cut -d'"' -f2 | awk '{print $1*100}')
          if [ -z "$COVERAGE" ]; then COVERAGE=0; fi
          echo "Coverage Percentage: $COVERAGE"

          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            RESULT="✅ Code Passed (Coverage: ${COVERAGE}%)"
          else
            RESULT="❌ Code Failed (Coverage: ${COVERAGE}%)"
          fi

          echo "Creating GitHub Issue..."
          gh issue create --title "SonarQube Code Quality Report" \
            --body "$RESULT\n\nCheck the latest pipeline run for more details." \
            --label "code-quality"

