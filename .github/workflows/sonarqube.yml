name: SonarQube Code Analysis
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  WORKSPACE: ${{ github.workspace }}
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  PYTHONUTF8: 1
  NODE_VERSION: '18'
  SONAR_SCANNER_VERSION: "5.0.1.3006"
  MIN_COVERAGE_THRESHOLD: 80
  COMPLETION_URL: "https://manav8269.github.io/python/"

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      checks: write
      pull-requests: write
      issues: write
    steps:
      # (All setup and scan steps remain unchanged)

      # Show Success or Failure Popup (handles condition internally)
      - name: Evaluate SonarQube Result
        if: always()
        uses: actions/github-script@v7
        env:
          SONAR_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_KEY: ${{ env.SONAR_PROJECT_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const exitCode = '${{ steps.sonarqube.outputs.sonar_exit_code }}';
            const rawCoverage = '${{ steps.sonarqube.outputs.coverage_percent }}';
            const threshold = parseFloat('${{ env.MIN_COVERAGE_THRESHOLD }}');
            const coverage = parseFloat(rawCoverage || '0');

            if (!isNaN(coverage) && coverage >= threshold && exitCode === '0') {
              core.notice(`✅ Code Coverage: ${coverage.toFixed(2)}% - Passed Threshold!`, { title: 'SonarQube Check Success' });
            } else {
              core.error(`❌ Code Coverage: ${isNaN(coverage) ? 'Invalid' : coverage.toFixed(2)}% - Below Threshold of ${threshold}%`, { title: 'SonarQube Check Failed' });
            }

      # Generate Dynamic Summary (inside script block)
      - name: Write Summary
        if: always()
        uses: actions/github-script@v7
        env:
          SONAR_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_KEY: ${{ env.SONAR_PROJECT_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const exitCode = '${{ steps.sonarqube.outputs.sonar_exit_code }}';
            const rawCoverage = '${{ steps.sonarqube.outputs.coverage_percent }}';
            const threshold = parseFloat('${{ env.MIN_COVERAGE_THRESHOLD }}');
            const coverage = parseFloat(rawCoverage || '0');

            const repo = '${{ github.repository }}';
            const branch = '${{ github.ref_name }}';
            const commit = '${{ github.sha }}';
            const sonarUrl = process.env.SONAR_URL + '/dashboard?id=' + process.env.SONAR_KEY;
            const summaryLines = [];

            if (!isNaN(coverage) && coverage >= threshold && exitCode === '0') {
              summaryLines.push("## ✅ Code Approved: Coverage " + coverage.toFixed(2) + "% meets threshold!");
            } else {
              summaryLines.push("## ❌ Code Coverage Below Threshold: " + (isNaN(coverage) ? 'Invalid' : coverage.toFixed(2)) + "%");
              summaryLines.push("Please improve test coverage before merging!");
            }

            summaryLines.push("");
            summaryLines.push(`**Repository:** ${repo}`);
            summaryLines.push(`**Branch:** ${branch}`);
            summaryLines.push(`**Commit:** ${commit}`);
            summaryLines.push(`**Coverage:** ${isNaN(coverage) ? 'Invalid' : coverage.toFixed(2)}% (Threshold: ${threshold}%)`);
            summaryLines.push("");
            summaryLines.push(`🔗 [View Full SonarQube Report](${sonarUrl})`);

            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summaryLines.join("\n") + "\n");

      - name: Add Result Link to Summary
        if: always()
        run: |
          echo "## 🔗 Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results at: [${{ env.COMPLETION_URL }}](${{ env.COMPLETION_URL }})" >> $GITHUB_STEP_SUMMARY
