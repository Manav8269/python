name: CI/CD with SonarQube and Django

on:
  push:
    branches:
      - main

permissions:
  issues: write

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: üìÇ Locate Django Project
        id: find_project
        run: |
          PROJECT_DIR=$(find . -name manage.py -printf '%h\n' | head -n 1)
          [ -z "$PROJECT_DIR" ] && echo "‚ùå ERROR: manage.py not found!" && exit 1
          echo "PROJECT_DIR=${PROJECT_DIR}" >> $GITHUB_ENV
          echo "PROJECT_BASE=$(dirname "${PROJECT_DIR}")" >> $GITHUB_ENV
          echo "PYTHONPATH=${PROJECT_BASE}" >> $GITHUB_ENV
          echo "‚úÖ Found Django project at: ${PROJECT_DIR}"
      
      - name: üìû Install Dependencies
        run: |
          cd "$PROJECT_DIR"
          pip install --upgrade pip
          pip install pytest coverage django
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
      
      - name: üìä Run Tests and Generate Coverage
        run: |
          cd "$PROJECT_DIR"
          python -m coverage run --source=. manage.py test || true
          python -m coverage xml -o coverage.xml
          echo "SONAR_COVERAGE_REPORT=coverage.xml" >> $GITHUB_ENV

      - name: üõ†Ô∏è Install SonarScanner
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH
      
      - name: üîé Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://3310-27-107-135-240.ngrok-free.app"
        run: |
          cd "$PROJECT_DIR"
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=my-django-project \
            -Dsonar.sources=. \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.token="$SONAR_TOKEN" \
            -Dsonar.python.version=3.9 \
            -Dsonar.python.coverage.reportPaths=$SONAR_COVERAGE_REPORT \
            -Dsonar.working.directory="$PROJECT_DIR/.scannerwork"
      
      - name: üìä Check SonarQube Quality Gate
        id: sonar_status
        run: |
          sleep 10
          STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=my-django-project" | jq -r '.projectStatus.status')
          SCORE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$SONAR_HOST_URL/api/measures/component?component=my-django-project&metricKeys=coverage" | jq -r '.component.measures[0].value')
          SCORE_INT=${SCORE%.*}
          echo "SONAR_SCORE=$SCORE_INT" >> $GITHUB_ENV
          echo "SONAR_STATUS=$STATUS" >> $GITHUB_ENV
          if [[ "$STATUS" == "OK" ]] && [[ "$SCORE_INT" -ge 80 ]]; then
            echo "‚úÖ Code Quality Approved"
            echo "APPROVED=true" >> $GITHUB_ENV
          else
            echo "‚ùå Code Quality Not Approved"
            echo "APPROVED=false" >> $GITHUB_ENV
          fi
      
      - name: üìß Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ env.APPROVED == 'true' && '‚úÖ Code Quality Passed' || '‚ùå Code Quality Failed' }}
          body: "Your code analysis completed. SonarQube score: ${{ env.SONAR_SCORE }}%. "
          to: developer@example.com
          from: CI/CD Pipeline

  notify:
    runs-on: ubuntu-latest
    needs: build-and-analyze
    steps:
      - name: üì¢ Notify via GitHub Issues
        run: |
          gh issue create --title "CI/CD Workflow Result" --body "SonarQube Analysis: ${{ env.SONAR_STATUS }} with score ${{ env.SONAR_SCORE }}%" --repo $GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üéâ Notify Completion
        run: echo "::notice::‚úÖ CI/CD Workflow completed successfully!"
