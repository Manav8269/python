name: SonarQube Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: ${{ github.repository }}
  SONAR_PROJECT_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Project Type
        id: detect
        run: |
          REACT_PROJECT=$(find . -name '*.jsx' -o -name '*.tsx' -o -name 'App.js' | grep -q . && echo "true" || echo "false")
          ANGULAR_PROJECT=$([ -f "angular.json" ] && echo "true" || echo "false")
          PYTHON_PROJECT=$(find . -name '*.py' -o -name 'requirements.txt' | grep -q . && echo "true" || echo "false")
          
          echo "REACT_PROJECT=$REACT_PROJECT" >> $GITHUB_ENV
          echo "ANGULAR_PROJECT=$ANGULAR_PROJECT" >> $GITHUB_ENV
          echo "PYTHON_PROJECT=$PYTHON_PROJECT" >> $GITHUB_ENV

      - name: Setup JavaScript Environment
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install JavaScript Dependencies
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        run: npm ci --no-audit --no-fund

      - name: Run JavaScript Tests
        if: env.REACT_PROJECT == 'true' || env.ANGULAR_PROJECT == 'true'
        uses: NickCarneiro/jest-report-action@v2
        with:
          test-script: 'npm test -- --coverage --watchAll=false'
          coverage-file: 'coverage/lcov.info'
          junit-report: 'test-results/junit.xml'

      - name: Setup Python Environment
        if: env.PYTHON_PROJECT == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python Dependencies
        if: env.PYTHON_PROJECT == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest coverage pytest-cov

      - name: Run Python Tests
        if: env.PYTHON_PROJECT == 'true'
        run: |
          pytest --cov=. --cov-report=xml:coverage.xml --junitxml=junit-results.xml -v
          coverage html

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ env.SONAR_PROJECT_NAME }}
            -Dsonar.sources=.
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*.test.*,**/tests/**/*.*
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.xunit.reportPath=junit-results.xml
            -Dsonar.testExecutionReportPaths=test-results/junit.xml
            -Dsonar.qualitygate.wait=true

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/**
            junit-results.xml
